version: '3.8'

services:
  # Main API service
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/ai_content_db
      - REDIS_URL=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - ai-content-network

  # Telegram Bot service
  telegram-bot:
    build: .
    command: python -c "
      import asyncio;
      from src.telegram_bot import create_bot;
      bot = create_bot();
      asyncio.run(bot.start_polling())
      "
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_HOST=api
      - API_PORT=8000
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - ai-content-network

  # PostgreSQL database
  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=ai_content_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ai-content-network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ai-content-network

  # MinIO for S3-compatible storage (development)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - ai-content-network

  # Optional: MinIO client for bucket creation
  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb minio/ai-content-storage --ignore-existing;
      /usr/bin/mc policy set public minio/ai-content-storage;
      exit 0;
      "
    networks:
      - ai-content-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  ai-content-network:
    driver: bridge 
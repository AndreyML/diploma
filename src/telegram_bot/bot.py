"""
Telegram Bot for AI Content Generation Service
Implementation based on the diploma work specification
"""
import logging
import base64
import io
from typing import Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import httpx
from src.config.settings import settings
logger = logging.getLogger(__name__)
# Bot states
class BotStates(StatesGroup):
    MAIN_MENU = State()
    GENERATING_IMAGE = State()
    TRAINING_MODEL = State()
    UPLOADING_TRAINING_DATA = State()
class TelegramBot:
    """Telegram bot for AI content generation service"""
    def __init__(self, token: str, api_base_url: str):
        """
        Initialize Telegram bot
        Args:
            token: Telegram bot token
            api_base_url: Base URL of the REST API service
        """
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.api_base_url = api_base_url.rstrip('/')
        # Setup handlers
        self._setup_handlers()
        logger.info("Telegram bot initialized")
    def _setup_handlers(self):
        """Setup message handlers"""
        # Command handlers
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.help_command, Command("help"))
        # Menu handlers
        self.dp.message.register(
            self.generate_image_handler,
            F.text == "üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        )
        self.dp.message.register(
            self.train_model_handler,
            F.text == "üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"
        )
        self.dp.message.register(
            self.history_handler,
            F.text == "üìù –ò—Å—Ç–æ—Ä–∏—è"
        )
        self.dp.message.register(
            self.help_handler,
            F.text == "‚ùì –ü–æ–º–æ—â—å"
        )
        # State handlers
        self.dp.message.register(
            self.process_image_prompt,
            StateFilter(BotStates.GENERATING_IMAGE)
        )
        self.dp.message.register(
            self.process_training_data,
            StateFilter(BotStates.UPLOADING_TRAINING_DATA),
            F.content_type.in_(['photo', 'text'])
        )
        # Callback handlers
        self.dp.callback_query.register(
            self.enhanced_generation_callback,
            F.data == "enhanced_generation"
        )
        self.dp.callback_query.register(
            self.standard_generation_callback,
            F.data == "standard_generation"
        )
    def get_main_keyboard(self) -> ReplyKeyboardMarkup:
        """Get main menu keyboard"""
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
                [KeyboardButton(text="üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")],
                [KeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True,
            persistent=True
        )
        return keyboard
    def get_generation_keyboard(self) -> InlineKeyboardMarkup:
        """Get generation type selection keyboard"""
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="enhanced_generation")],
                [InlineKeyboardButton(text="üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="standard_generation")]
            ]
        )
        return keyboard
    async def start_command(self, message: types.Message, state: FSMContext):
        """Handle /start command"""
        await state.set_state(BotStates.MAIN_MENU)
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Content Generator!
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
üé® –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        await message.answer(
            welcome_text,
            reply_markup=self.get_main_keyboard()
        )
    async def help_command(self, message: types.Message):
        """Handle /help command"""
        await self.help_handler(message)
    async def help_handler(self, message: types.Message):
        """Handle help button"""
        help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
1. –ù–∞–∂–º–∏—Ç–µ "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è - —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º –ø—Ä–æ–º–ø—Ç–∞
   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –µ—Å—Ç—å
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
4. –ü–æ–ª—É—á–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
üß† **–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:**
1. –ù–∞–∂–º–∏—Ç–µ "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"
2. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
üìù **–ò—Å—Ç–æ—Ä–∏—è:**
–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –æ–±—É—á–µ–Ω–∏–π
üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–µ—Ç–∞–ª—å–Ω–æ (—Ü–≤–µ—Ç, —Ñ–æ—Ä–º–∞, —Å—Ç–∏–ª—å)
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ–Ω –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 5-20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        """
        await message.answer(help_text)
    async def generate_image_handler(self, message: types.Message, state: FSMContext):
        """Handle image generation button"""
        await message.answer(
            "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=self.get_generation_keyboard()
        )
    async def enhanced_generation_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """Handle enhanced generation callback"""
        await state.set_state(BotStates.GENERATING_IMAGE)
        await state.update_data(generation_type="enhanced")
        await callback.message.answer(
            "‚ú® **–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è**\n\n"
            "–í–∞—à –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–µ–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:"
        )
        await callback.answer()
    async def standard_generation_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """Handle standard generation callback"""
        await state.set_state(BotStates.GENERATING_IMAGE)
        await state.update_data(generation_type="standard")
        await callback.message.answer(
            "üéØ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è**\n\n"
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ—á–Ω–æ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:"
        )
        await callback.answer()
    async def process_image_prompt(self, message: types.Message, state: FSMContext):
        """Process image generation prompt"""
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return
        data = await state.get_data()
        generation_type = data.get("generation_type", "standard")
        await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        try:
            # Choose endpoint based on generation type
            endpoint = "/api/v1/generate_enhanced" if generation_type == "enhanced" else "/api/v1/generate_image"
            # Make API request
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(
                    f"{self.api_base_url}{endpoint}",
                    json={
                        "prompt": message.text,
                        "num_images": 1
                    }
                )
            if response.status_code == 200:
                result = response.json()
                images = result.get("images", [])
                if images:
                    for i, base64_image in enumerate(images):
                        # Convert base64 to bytes
                        image_data = base64.b64decode(base64_image)
                        # Send image
                        await message.answer_photo(
                            types.BufferedInputFile(image_data, filename=f"generated_{i+1}.png"),
                            caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\nüìù –ü—Ä–æ–º–ø—Ç: {message.text[:100]}..."
                        )
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            else:
                error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
        except Exception as e:
            logger.error(f"Error generating image: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.set_state(BotStates.MAIN_MENU)
    async def train_model_handler(self, message: types.Message, state: FSMContext):
        """Handle model training button"""
        await state.set_state(BotStates.UPLOADING_TRAINING_DATA)
        await state.update_data(training_data=[])
        await message.answer(
            "üß† **–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏**\n\n"
            "–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n\n"
            "üìù –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n"
            "2. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /train –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è.\n\n"
            "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."
        )
    async def process_training_data(self, message: types.Message, state: FSMContext):
        """Process training data upload"""
        data = await state.get_data()
        training_data = data.get("training_data", [])
        if message.photo:
            # Get the largest photo
            photo = message.photo[-1]
            # Download photo
            file = await self.bot.get_file(photo.file_id)
            photo_data = await self.bot.download_file(file.file_path)
            # Convert to base64
            base64_image = base64.b64encode(photo_data.read()).decode('utf-8')
            # Store photo temporarily
            await state.update_data(pending_image=base64_image)
            await message.answer(
                "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"
            )
        elif message.text:
            if message.text.startswith("/train"):
                # Start training
                if len(training_data) < 1:
                    await message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.")
                    return
                await self.start_training(message, training_data, state)
                return
            # Process description
            pending_image = data.get("pending_image")
            if pending_image:
                # Add training sample
                training_data.append({
                    "image": pending_image,
                    "description": message.text
                })
                await state.update_data(
                    training_data=training_data,
                    pending_image=None
                )
                await message.answer(
                    f"‚úÖ –ü–∞—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞! "
                    f"–í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {len(training_data)}\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /train –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è."
                )
            else:
                await message.answer(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /train –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è."
                )
    async def start_training(self, message: types.Message, training_data: list, state: FSMContext):
        """Start model training"""
        await message.answer(
            f"üß† –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ {len(training_data)} –æ–±—Ä–∞–∑—Ü–∞—Ö...\n"
            f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        try:
            async with httpx.AsyncClient(timeout=300.0) as client:
                response = await client.post(
                    f"{self.api_base_url}/api/v1/train",
                    json={"train_data": training_data}
                )
            if response.status_code == 200:
                result = response.json()
                lora_url = result.get("lora_params_url", "")
                await message.answer(
                    "‚úÖ **–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ—Å–∞ –º–æ–¥–µ–ª–∏:\n`{lora_url}`\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.",
                    parse_mode="Markdown"
                )
            else:
                error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {error_msg}")
        except Exception as e:
            logger.error(f"Error training model: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏.")
        await state.set_state(BotStates.MAIN_MENU)
    async def history_handler(self, message: types.Message):
        """Handle history button"""
        # In a real implementation, this would fetch user's history from database
        await message.answer(
            "üìù **–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π**\n\n"
            "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –æ–±—É—á–µ–Ω–∏–π.\n\n"
            "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )
    async def start_polling(self):
        """Start bot polling"""
        try:
            logger.info("Starting Telegram bot polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Error in bot polling: {e}")
            raise
    async def stop(self):
        """Stop the bot"""
        await self.bot.session.close()
# Factory function to create bot instance
def create_bot(token: str = None, api_base_url: str = None) -> TelegramBot:
    """
    Create Telegram bot instance
    Args:
        token: Telegram bot token (from settings if None)
        api_base_url: API base URL (from settings if None)
    Returns:
        TelegramBot instance
    """
    if not token:
        token = settings.TELEGRAM_BOT_TOKEN
    if not api_base_url:
        api_base_url = f"http://{settings.API_HOST}:{settings.API_PORT}"
    if not token:
        raise ValueError("Telegram bot token is required")
    return TelegramBot(token, api_base_url)
